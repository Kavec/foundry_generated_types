declare const gsapWithCSS: {
    registerPlugin(...args: any[]): void;
    timeline(vars: any): TimelineLite;
    getTweensOf(targets: any, onlyActive: any): any;
    getProperty(target: any, property: any, unit: any, uncache: any): any;
    quickSetter(target: any, property: any, unit: any): any;
    quickTo(target: any, property: any, vars: any): {
        (value: any, start: any, startIsRelative: any): any;
        tween: any;
    };
    isTweening(targets: any): boolean;
    defaults(value: any): any;
    config(value: any): any;
    registerEffect({ name, effect, plugins, defaults, extendTimeline }: {
        name: any;
        effect: any;
        plugins: any;
        defaults: any;
        extendTimeline: any;
    }): void;
    registerEase(name: any, ease: any): void;
    parseEase(ease: any, defaultEase: any, ...args: any[]): any;
    getById(id: any): any;
    exportRoot(vars: {}, includeDelayedCalls: any): TimelineLite;
    context: (func: any, scope: any) => any;
    matchMedia: (scope: any) => {
        contexts: any[];
        scope: any;
        add(conditions: any, func: any, scope: any): any;
        revert(config: any): void;
        kill(revert: any): void;
    };
    matchMediaRefresh: () => void;
    addEventListener(type: any, callback: any): void;
    removeEventListener(type: any, callback: any): void;
    utils: {
        wrap: (min: any, max: any, value: any) => any;
        wrapYoyo: (min: any, max: any, value: any) => any;
        distribute: (v: any) => any;
        random: (min: any, max: any, roundingIncrement: any, returnFunction: any) => any;
        snap: (snapTo: any, value: any) => any;
        normalize: (min: any, max: any, value: any) => any;
        getUnit: (value: any, v: any) => any;
        clamp: (min: any, max: any, value: any) => any;
        splitColor: (v: any, toHSL: any, forceAlpha: any) => number | number[];
        toArray: (value: any, scope: any, leaveStrings: any) => any;
        selector: (value: any) => (v: any) => any;
        mapRange: (inMin: any, inMax: any, outMin: any, outMax: any, value: any) => any;
        pipe: (...functions: any[]) => (value: any) => any;
        unitize: (func: any, unit: any) => (value: any) => any;
        interpolate: (start: any, end: any, progress: any, mutate: any) => any;
        shuffle: (a: any) => any;
    };
    install: (scope: any) => any;
    effects: {};
    ticker: {
        time: number;
        frame: number;
        tick(): void;
        deltaRatio(fps: any): number;
        wake(): void;
        sleep(): void;
        lagSmoothing(threshold: any, adjustedLag: any): void;
        fps(fps: any): void;
        add(callback: any, once: any, prioritize: any): any;
        remove(callback: any, i: any): void;
        _listeners: any[];
    };
    updateRoot: typeof TimelineLite.updateRoot;
    plugins: {};
    globalTimeline: TimelineLite;
    core: {
        PropTween: typeof import("./gsap-core.js").PropTween;
        globals: (name: any, obj: any) => any;
        Tween: typeof TweenLite;
        Timeline: typeof TimelineLite;
        Animation: typeof import("./gsap-core.js").Animation;
        getCache: (target: any) => any;
        _removeLinkedListItem: (parent: any, child: any, firstProp?: string, lastProp?: string) => void;
        reverting: () => any;
        context: (toAdd: any) => any;
        suppressOverwrites: (value: any) => any;
    };
};
import { CSSPlugin } from "./CSSPlugin.js";
declare const TweenMaxWithCSS: typeof TweenLite;
import { TweenLite } from "./gsap-core.js";
import { TimelineMax } from "./gsap-core.js";
import { TimelineLite } from "./gsap-core.js";
import { Power0 } from "./gsap-core.js";
import { Power1 } from "./gsap-core.js";
import { Power2 } from "./gsap-core.js";
import { Power3 } from "./gsap-core.js";
import { Power4 } from "./gsap-core.js";
import { Linear } from "./gsap-core.js";
import { Quad } from "./gsap-core.js";
import { Cubic } from "./gsap-core.js";
import { Quart } from "./gsap-core.js";
import { Quint } from "./gsap-core.js";
import { Strong } from "./gsap-core.js";
import { Elastic } from "./gsap-core.js";
import { Back } from "./gsap-core.js";
import { SteppedEase } from "./gsap-core.js";
import { Bounce } from "./gsap-core.js";
import { Sine } from "./gsap-core.js";
import { Expo } from "./gsap-core.js";
import { Circ } from "./gsap-core.js";
export { gsapWithCSS as gsap, gsapWithCSS as default, CSSPlugin, TweenMaxWithCSS as TweenMax, TweenLite, TimelineMax, TimelineLite, Power0, Power1, Power2, Power3, Power4, Linear, Quad, Cubic, Quart, Quint, Strong, Elastic, Back, SteppedEase, Bounce, Sine, Expo, Circ };
