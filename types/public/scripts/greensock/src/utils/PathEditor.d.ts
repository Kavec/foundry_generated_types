export class PathEditor {
    constructor(target: any, vars: any);
    vars: any;
    path: any;
    _g: any;
    _selectionHittest: any;
    _selection: any;
    _selectionPath: any;
    _selectedAnchors: any[];
    _line1: any;
    _line2: any;
    _enabled: boolean;
    _squareHandle: string;
    _circleHandle: string;
    _handle1: any;
    _handle2: any;
    _draggable: DraggableSVG;
    _onRelease(e: any): void;
    init(): this;
    _rawPath: any[];
    _anchors: any;
    _saveState(): void;
    _onClickSelectionPath(e: any): void;
    _onClickHandle1(): void;
    _onClickHandle2(): void;
    _onDragEndAnchor(e: any): void;
    isSelected(): boolean;
    select(allAnchors: any): this;
    _editingAnchor: any;
    deselect(): this;
    _onDragPath(e: any): void;
    _onPressAnchor(anchor: any): void;
    _deleteSelectedAnchors(): void;
    _onClickAnchor(anchor: any): void;
    _updateAnchors(): void;
    _onPressAlt(): void;
    _onReleaseAlt(): void;
    _onPressHandle1(): void;
    _oppositeHandleLength: number;
    _onPressHandle2(): void;
    _onReleaseHandle(e: any): void;
    _onDragHandle1(): void;
    _onDragHandle2(): void;
    _onDragAnchor(anchor: any, changeX: any, changeY: any): void;
    enabled(enabled: any, ...args: any[]): boolean | this;
    update(readPath: any): this;
    getRawPath(applyTransforms: any, offsetX: any, offsetY: any): any;
    getString(applyTransforms: any, offsetX: any, offsetY: any): any;
    getNormalizedSVG(height: any, originY: any, shorten: any, onEaseError: any): string;
}
export namespace PathEditor {
    export { simplifyPoints };
    export { pointsToSegment };
    export function simplifySVG(data: any, vars: any): any;
    export function create(target: any, vars: any): PathEditor;
    export { _editingAxis as editingAxis };
    export function getSnapFunction(vars: any): (p: any) => void;
    export let version: string;
}
export { PathEditor as default };
declare class DraggableSVG {
    constructor(target: any, vars: any);
    target: any;
    vars: any;
    _onPress: (e: any) => any;
    _onMove: (e: any) => any;
    _onRelease: (e: any) => any;
    _matrix: any;
    x: any;
    y: any;
    snap: any;
    _bounds: number;
    maxX: number;
    minX: number;
    setPointerPosition(pointerX: any, pointerY: any): void;
    pointerX: any;
    pointerY: any;
    isDragging: boolean;
    enabled(enabled: any, ...args: any[]): any;
    _enabled: any;
    isPressed: boolean;
    endDrag(e: any): void;
}
import { simplifyPoints } from "./paths.js";
import { pointsToSegment } from "./paths.js";
declare let _editingAxis: {};
